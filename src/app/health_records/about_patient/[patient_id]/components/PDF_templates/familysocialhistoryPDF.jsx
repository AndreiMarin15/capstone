"use client";
import {
	Table,
	TableBody,
	TableCaption,
	TableCell,
	TableFooter,
	TableHead,
	TableHeader,
	TableRow,
} from "@/components/ui/table";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import { useRef } from "react";
import { Button } from "@/components/ui/button";
import { getFamilyMemberHistory } from "@/backend/pdfBackend/getPDFData";
import { useEffect, useState } from "react";
import { currentUser } from "@/app/store";
export function FamilySocialHistoryPDF({ patientId, patientData }) {
	const [familyhistory, setFamilyHistory] = useState([
		{
			// number: "1", // wala sa fhir pang count lang ng rows (number)
			name: "Jhoanna Mae Dela Cruz", // familymemberhistory table: name (string)
			relationship: "Mother", // familymemberhistory table: relationship (string)
			condition: "Hypertension", // familymemberhistory table: condition code (string)
			procedure: "N/A", // familymemberhistory table: procedure (string)
		},
		{
			// number: "2",
			name: "Jhomar Dela Cruz",
			relationship: "Father",
			condition: "Cardiomyopathy",
			procedure: "Angioplasty",
		},
	]);

	useEffect(() => {
		const fetchData = async () => {
			const response = await getFamilyMemberHistory(patientId);

			console.log(response);
			setFamilyHistory(
				response.map((familyhistory, index) => ({
					name: familyhistory.resource.name,
					relationship: familyhistory.resource.relationship,
					condition: familyhistory.resource.condition.code || "N/A",
					procedure: familyhistory.resource.procedure?.length > 0 ? familyhistory.resource.procedure : "N/A",
				}))
			);
		};

		fetchData();
	}, []);
	function getCurrentDateFormatted() {
		const date = new Date();
		const monthNames = [
			"January",
			"February",
			"March",
			"April",
			"May",
			"June",
			"July",
			"August",
			"September",
			"October",
			"November",
			"December",
		];
		const month = monthNames[date.getMonth()];
		const day = date.getDate();
		const year = date.getFullYear();
		return `${month} ${day}, ${year}`;
	}
	const pdfRef = useRef();
	const downloadPDF = () => {
		const input = pdfRef.current;

		// Remove the 'hidden' class
		input.classList.remove("hidden");

		const width = input.offsetWidth;
		const height = input.offsetHeight;
		let computedWidth = width;
		let computedHeight = height;
		console.log(width, height);
		if (width < 1920 / 2) {
			computedWidth = 1920 / 2;
			// computedHeight = computedWidth / 2;
		}
		if (height < 1080 / 2) {
			computedHeight = 1080 / 2;
			// computedWidth = computedHeight * 2;
		}

		console.log(computedWidth, computedHeight);

		html2canvas(input)
			.then((canvas) => {
				const imgData = canvas.toDataURL("image/png");
				const pdf = new jsPDF("l", "px", [computedWidth, computedHeight]);
				pdf.addImage(imgData, "PNG", 0, 0, width, height);
				pdf.save(`Family History.pdf`);
			})
			.finally(() => {
				// Add the 'hidden' class back after the PDF has been downloaded
				input.classList.add("hidden");
			});
	};
	return (
		<div className="flex items-center justify-center text-center m-2">
			<Button onClick={downloadPDF}>Download</Button>
			<div ref={pdfRef} className="hidden z-[-10] absolute" style={{ left: "-5000px" }}>
				{" "}
				<div className="text-black text-center text-base font-bold leading-5 mt-8 max-md:ml-1 max-md:mt-10">
					{patientData?.personal_information?.first_name} {patientData?.personal_information?.last_name}
				</div>
				<div className="text-black text-center text-base leading-5 max-md:ml-1 max-md:mt-10 mb-10">
					Family/ Social History
				</div>
				<Table className="mb-5 pb-5">
					<TableCaption>
						<div className="flex items-center text-center">
						Generated by {currentUser.getState().user.first_name} {currentUser.getState().user.last_name} through
						EndoTracker on {getCurrentDateFormatted()}
						</div>
					</TableCaption>
					<TableHeader>
						<TableRow>
							<TableHead className="w-[200px]">No.</TableHead>
							<TableHead>Name</TableHead>
							<TableHead>Relationship</TableHead>
							<TableHead>Condition</TableHead>
							<TableHead>Procedure</TableHead>
						</TableRow>
					</TableHeader>
					<TableBody className="bg-white">
						{familyhistory?.map((familyhistory, index) => (
							<TableRow key={familyhistory.name}>
								<TableCell className="font-medium">{index + 1}</TableCell>
								<TableCell>{familyhistory.name}</TableCell>
								<TableCell>{familyhistory.relationship}</TableCell>
								<TableCell>{familyhistory.condition}</TableCell>
								<TableCell>{familyhistory.procedure}</TableCell>
							</TableRow>
						))}
					</TableBody>
				</Table>
			</div>
		</div>
	);
}
